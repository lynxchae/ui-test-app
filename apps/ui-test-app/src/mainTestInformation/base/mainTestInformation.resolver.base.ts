/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMainTestInformationArgs } from "./CreateMainTestInformationArgs";
import { UpdateMainTestInformationArgs } from "./UpdateMainTestInformationArgs";
import { DeleteMainTestInformationArgs } from "./DeleteMainTestInformationArgs";
import { MainTestInformationCountArgs } from "./MainTestInformationCountArgs";
import { MainTestInformationFindManyArgs } from "./MainTestInformationFindManyArgs";
import { MainTestInformationFindUniqueArgs } from "./MainTestInformationFindUniqueArgs";
import { MainTestInformation } from "./MainTestInformation";
import { MainTestInformationService } from "../mainTestInformation.service";
@graphql.Resolver(() => MainTestInformation)
export class MainTestInformationResolverBase {
  constructor(protected readonly service: MainTestInformationService) {}

  async _mainTestInformationsMeta(
    @graphql.Args() args: MainTestInformationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MainTestInformation])
  async mainTestInformations(
    @graphql.Args() args: MainTestInformationFindManyArgs
  ): Promise<MainTestInformation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MainTestInformation, { nullable: true })
  async mainTestInformation(
    @graphql.Args() args: MainTestInformationFindUniqueArgs
  ): Promise<MainTestInformation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MainTestInformation)
  async createMainTestInformation(
    @graphql.Args() args: CreateMainTestInformationArgs
  ): Promise<MainTestInformation> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MainTestInformation)
  async updateMainTestInformation(
    @graphql.Args() args: UpdateMainTestInformationArgs
  ): Promise<MainTestInformation | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MainTestInformation)
  async deleteMainTestInformation(
    @graphql.Args() args: DeleteMainTestInformationArgs
  ): Promise<MainTestInformation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
